PROCEDURE Dot_Product(v1 :ARRAY_OF FLOAT, v2 :ARRAY_OF FLOAT, VAR ps :FLOAT)
VAR
    i : INTEGER;
BEGIN
    ps := 0;
    FOR i FROM 0 TO v1.length-1 DO
        ps := ps + v1[i]*v2[i];
    END_FOR
END

FUNCTION Dot_Product(v1 :ARRAY_OF FLOAT, v2 :ARRAY_OF FLOAT) : FLOAT
VAR
    i : INTEGER;
    ps : FLOAT;
BEGIN
    ps := 0;
    FOR i FROM 0 TO v1.length-1 DO
        ps := ps + v1[i]*v2[i];
    END_FOR
    RETURN ps ;
END

ALGORITHM orthogonal
VAR
    v1 : ARRAY_OF FLOAT;
    v2 : ARRAY_OF FLOAT;
    ps : FLOAT;
    n,k,i,j : INTEGER ;
BEGIN
    write("enter n pairs of vectors");
    read(n);
    write("Enter the number of vector's element ");
    read(k);

    FOR i FROM 1 TO n DO
        write("Enter the elements of the V1, separated by ',' :");
        FOR j FROM 0 TO k-1 DO
            read(v1[j]);        
        END_FOR
        
        write("Enter the elements of the V2, separated by ',' :");
        FOR j FROM 0 TO k-1 DO
            read(v2[j]);        
        END_FOR
        
        Dot_Product(v1, v2, ps);
        IF (ps = 0) THEN
            write("The vectors are orthogonal");
        ELSE
            write("The vectors are not orthogonal");
        END_IF
        
    END_FOR
END

        //Using function

ALGORITHM orthogonal
VAR
    v1 : ARRAY_OF FLOAT;
    v2 : ARRAY_OF FLOAT;
    ps : FLOAT;
    n,k,i,j : INTEGER ;
BEGIN
    write("enter n pairs of vectors");
    read(n);
    write("Enter the number of vector's element ");
    read(k);

    FOR i FROM 1 TO n DO
        write("Enter the elements of the V1, separated by ',' :");
        FOR j FROM 0 TO k-1 DO
            read(v1[j]);        
        END_FOR
        
        write("Enter the elements of the V2, separated by ',' :");
        FOR j FROM 0 TO k-1 DO
            read(v2[j]);        
        END_FOR
        
        ps := Dot_Product(v1, v2);
        IF (ps = 0) THEN
            write("The vectors are orthogonal");
        ELSE
            write("The vectors are not orthogonal");
        END_IF
        
    END_FOR
END